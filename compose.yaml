volumes:
  grafana_data:
  logs:
  datadir:
  gwc_config:
  gwc:
  netcfd:
  grib_cache:
  data_pg:
  backend_mapas:
networks:
  net:
    name: net
    driver: bridge


services:


  api:
    env_file:
      - .env
    build:
      dockerfile:
        Dockerfile
    image: benefrancis/mapas
    container_name: api
    deploy:
      resources:
        limits:
          memory: 3G
    ports:
      - ${SERVER_PORT:-80}:${SERVER_PORT:-80}
    depends_on:
      - mapas_db
    environment:
      JAVA_OPTS: -Xms1g -Xmx2g
      POSTGRES_SERVER: mapas_db
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_NAME: ${POSTGRES_NAME:-mapas}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - ./src/main/resources/templates:/templates
      - ./src/main/resources/static:/static
      - logs:/data/logs/mapas
      - backend_mapas:/assets
    command: mvn clean package -DskipTests
    networks:
      - net
    restart: always

  geoserver:
    image: geosolutionsit/geoserver:2.26.x
    container_name: geoserver
    restart: always
    environment:
      POSTGRES_JNDI_ENABLED: true
      POSTGRES_HOST: mapas_db
      POSTGRES_PORT: 5432
      POSTGRES_DB: mapas
      POSTGRES_USERNAME: postgres
      POSTGRES_PASSWORD: postgres
      GEOSERVER_ADMIN_USERNAME: "admin" # Troque esta senha
      GEOSERVER_ADMIN_PASSWORD: "geoserver" # Troque esta senha
      GEOSERVER_LOG_DIR: /var/log/geoserver
      GEOSERVER_DATA_DIR: /var/lib/geoserver_data
      GEOWEBCACHE_CONFIG_DIR: /var/lib/geowebcache/config
      GEOWEBCACHE_CACHE_DIR: /var/lib/geowebcache/cache
      NETCDF_DATA_DIR: /var/lib/netcdf
      GRIB_CACHE_DIR: /var/lib/grib
    volumes:
      - logs:/var/log/geoserver
      - datadir:/var/lib/geoserver_data
      - gwc_config:/var/lib/geowebcache/config
      - gwc:/var/lib/geowebcache/cache
      - netcfd:/var/lib/netcdf
      - grib_cache:/var/lib/grib
    ports:
      - "8080:8080"
    networks:
      - net
    depends_on:
      - mapas_db
    command: [ "catalina.sh", "run" ]
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/geoserver/rest/about/status" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  mapas_db:
    image: postgis/postgis:9.5-2.5
    container_name: mapas_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mapas
    ports:
      - "5432:5432"
    volumes:
      - data_pg:/var/lib/postgresql/data
    networks:
      - net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - net
    volumes:
      - ./rabbitmq_setup.sh:/docker-entrypoint-initdb.d/rabbitmq_setup.sh
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_port", "15672" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  prometheus:
    image: prom/prometheus:v3.1.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - net
    depends_on:
      - geoserver
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9090/-/healthy" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  grafana:
    image: grafana/grafana:9.1.7
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - net
    depends_on:
      - prometheus
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

